[{"content":"Hello World thanks for reading\n","date":"2025-08-01T00:00:00Z","permalink":"https://example.com/p/test-chinese/","title":"HELLO WORLD"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://example.com/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://example.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://example.com/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://example.com/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://example.com/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://example.com/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://example.com/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://example.com/p/emoji-support/","title":"Emoji Support"},{"content":"最近在研究 DQN_HollowKnight 的作业，正好趁这个机会来熟悉一下假期学的一些深度学习的知识，主要是关于CNN和强化学习。\n这篇文章就先就着这个项目的大脑部分 Model.py 来讲一下涉及的知识点吧。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class BasicBlock(layers.Layer): def __init__(self,filter_num,name,stride=1, **kwargs): super(BasicBlock, self).__init__( **kwargs) self.filter_num = filter_num self.stride = stride self.layers = [] self.conv1=layers.Conv2D(filter_num,3,strides=stride,padding=\u0026#39;same\u0026#39;, name = name+\u0026#39;_1\u0026#39;) # self.bn1=layers.BatchNormalization() self.relu=layers.Activation(\u0026#39;relu\u0026#39;) self.conv2=layers.Conv2D(filter_num,3,strides=1,padding=\u0026#39;same\u0026#39;, name = name+\u0026#39;_2\u0026#39;) # self.bn2 = layers.BatchNormalization() self.layers.append(self.conv1) self.layers.append(self.conv2) # self.layers.append(self.bn1) # self.layers.append(self.bn2) if stride!=1: self.downsample=models.Sequential() self.downsample.add(layers.Conv2D(filter_num,1,strides=stride)) self.layers.append(self.downsample) else: self.downsample=lambda x:x def get_layer(self, index): return self.layers[index] def get_layers(self): return self.layers def call(self,input,training=None): out=self.conv1(input) # out=self.bn1(out) out=self.relu(out) out=self.conv2(out) # out=self.bn2(out) identity=self.downsample(input) output=layers.add([out,identity]) output=tf.nn.relu(output) return output def get_config(self): config = { \u0026#39;filter_num\u0026#39;: self.filter_num, \u0026#39;stride\u0026#39;: self.stride } base_config = super(BasicBlock, self).get_config() return dict(list(base_config.items()) + list(config.items())) 代码上来就是这一部分，如果之前没有了解过ResNet的话，可能会感觉有点迷茫，确实也正如作者所说，这个项目并不适合初学者学习，因为有点复杂，所牵扯模型部分过多。\n那我们先来讲一下关于ResNet吧。\n其实这个图片就很好的描述了残差神经网络做了什么，对于一个输入的X，我们会有一个非线性的函数$F(X)$对其进行操作，但是在函数叠加较多次（层数增多）时，模型很容易出现幻觉，因为经过了太多次的处理，之前的信息会迷失在处理所造成的误差之中，即使经过反向传播，也没有办法改变这一现状。所以ResNet受命于危难之际，应运而生。\n在对X操作之后，我们得到的$F(X)$可以和处理后的X连接起来，当作下一次输入，这样的话，模型始终能看到上一次处理前的信息，如果信息变化不大（这可能说明所变化的信息基本上都会造成误差，起反作用），那么反向传播后$F(X)$会逐渐趋近于0（无操作），使得模型更容易收敛。\n其实感觉文字的力量远不如代码，让我们少BB一点理论，直接实战开始。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class BasicBlock(layers.Layer): def __init__(self,filter_num,name,stride=1, **kwargs): # 调用了父类的初始化方法 super(BasicBlock, self).__init__( **kwargs) # 通道数 self.filter_num = filter_num # 步长 self.stride = stride # 用来存放实例属性的layers self.layers = [] # 第一层卷积 步长stride会影响卷积输出的结果，使用的padding=\u0026#39;same\u0026#39; self.conv1=layers.Conv2D(filter_num,3,strides=stride,padding=\u0026#39;same\u0026#39;, name = name+\u0026#39;_1\u0026#39;) # 批归一化层，不知道为什么被注释掉了 # self.bn1=layers.BatchNormalization() # 激活层 self.relu=layers.Activation(\u0026#39;relu\u0026#39;) # 第二层卷积，默认步长 = 1 self.conv2=layers.Conv2D(filter_num,3,strides=1,padding=\u0026#39;same\u0026#39;, name = name+\u0026#39;_2\u0026#39;) # self.bn2 = layers.BatchNormalization() self.layers.append(self.conv1) self.layers.append(self.conv2) # self.layers.append(self.bn1) # self.layers.append(self.bn2) #对输入的X进行处理，如果一开始stride ！= 1，那么就对X进行一个stride的一维卷积（丢弃一些像素） #如果stride = 1，那么就原路返回 if stride!=1: self.downsample=models.Sequential() self.downsample.add(layers.Conv2D(filter_num,1,strides=stride)) self.layers.append(self.downsample) else: self.downsample=lambda x:x 然后就是这一部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 def call(self,input,training=None): out=self.conv1(input) # out=self.bn1(out) out=self.relu(out) out=self.conv2(out) # out=self.bn2(out) identity=self.downsample(input) #最重要的叠加环节 output=layers.add([out,identity]) #第二次激活再叠加之后 output=tf.nn.relu(output) return output 之后的代码就是将res和训练代码结合起来\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def build_resblock(self,filter_num,blocks,name=\u0026#34;Resnet\u0026#34;,stride=1): res_blocks= models.Sequential() # may down sample res_blocks.add(BasicBlock(filter_num,name+\u0026#39;_1\u0026#39;,stride)) # just down sample one time for pre in range(1,blocks): res_blocks.add(BasicBlock(filter_num,name+\u0026#39;_2\u0026#39;,stride=1)) return res_blocks # 这里作者独立的使用了两个网络进行训练，分别训练move和actions def _build_model(self): # ------------------ build evaluate_net ------------------ self.shared_model = models.Sequential() self.private_act_model = models.Sequential() self.private_move_model = models.Sequential() # shared part # pre-process block # self.shared_model.add(Conv2D(64, (2,3,3),strides=(1,2,2), input_shape=self.input_shape, name=\u0026#39;conv1\u0026#39;)) # # self.shared_model.add(BatchNormalization(name=\u0026#39;b1\u0026#39;)) # self.shared_model.add(Activation(\u0026#39;relu\u0026#39;)) # self.shared_model.add(MaxPooling3D(pool_size=(2,2,2), strides=1, padding=\u0026#34;VALID\u0026#34;, name=\u0026#39;p1\u0026#39;)) # # resnet blocks # self.shared_model.add(self.build_resblock(64, 2, name=\u0026#39;Resnet_1\u0026#39;)) # self.shared_model.add(self.build_resblock(80, 2, name=\u0026#39;Resnet_2\u0026#39;, stride=2)) # self.shared_model.add(self.build_resblock(128, 2, name=\u0026#39;Resnet_3\u0026#39;, stride=2)) # output layer for action model \u0026#39;\u0026#39;\u0026#39; 在这里我先讲一次啊这个代码的输入逻辑，这个input_shape = [4,400,200,3]其实代表着有四帧的画面，像素点是400 * 200 * 3 的 ， 这一部分代码主要是对我看到了什么做一个简单的处理 \u0026#39;\u0026#39;\u0026#39; #经过第一次卷积，像素减半，画面帧数减一 3 * 200 *100 *32 self.private_act_model.add(Conv3D(32, (2,3,3),strides=(1,2,2), input_shape=self.input_shape, name=\u0026#39;conv1\u0026#39;)) self.private_act_model.add(Activation(\u0026#39;relu\u0026#39;)) #之后两次卷积不再改变形状，只关注画面和通道数量 self.private_act_model.add(Conv3D(48, (2,3,3),strides=(1,1,1), input_shape=self.input_shape, name=\u0026#39;conv2\u0026#39;)) self.private_act_model.add(Activation(\u0026#39;relu\u0026#39;)) self.private_act_model.add(Conv3D(64, (2,3,3),strides=(1,1,1), input_shape=self.input_shape, name=\u0026#39;conv3\u0026#39;)) self.private_act_model.add(Activation(\u0026#39;relu\u0026#39;)) #到这里画面只有一帧，去除时间信息 self.private_act_model.add(Lambda(lambda x:tf.reduce_sum(x, 1))) # self.private_act_model.add(MaxPooling3D(pool_size=(2,2,2), strides=1, padding=\u0026#34;VALID\u0026#34;, name=\u0026#39;p1\u0026#39;)) # 使用残差块，这里部分对我看到了什么做了非常具体的处理，每一部分的stride都是2，形状逐次减半，但是通道数逐渐增加，每一个都有两个block self.private_act_model.add(self.build_resblock(64, 2, name=\u0026#39;Resnet_1\u0026#39;)) self.private_act_model.add(self.build_resblock(96, 2, name=\u0026#39;Resnet_2\u0026#39;, stride=2)) self.private_act_model.add(self.build_resblock(128, 2, name=\u0026#39;Resnet_3\u0026#39;, stride=2)) self.private_act_model.add(self.build_resblock(256, 2, name=\u0026#39;Resnet_4\u0026#39;, stride=2)) self.private_act_model.add(GlobalAveragePooling2D()) # self.private_act_model.add(Reshape((1, -1))) # self.private_act_model.add(CuDNNLSTM(32)) #全连接层 self.private_act_model.add(Dense(self.act_dim, name=\u0026#34;d1\u0026#34;)) # action model self.private_act_model.summary() self.act_model = models.Sequential() # self.act_model.add(self.shared_model) self.act_model.add(self.private_act_model) # output layer for move model self.private_move_model.add(Conv3D(32, (2,3,3),strides=(1,2,2), input_shape=self.input_shape, name=\u0026#39;conv1\u0026#39;)) self.private_move_model.add(Activation(\u0026#39;relu\u0026#39;)) self.private_move_model.add(Conv3D(48, (2,3,3),strides=(1,1,1), input_shape=self.input_shape, name=\u0026#39;conv2\u0026#39;)) self.private_move_model.add(Activation(\u0026#39;relu\u0026#39;)) self.private_move_model.add(Conv3D(64, (2,3,3),strides=(1,1,1), input_shape=self.input_shape, name=\u0026#39;conv3\u0026#39;)) self.private_move_model.add(Activation(\u0026#39;relu\u0026#39;)) self.private_move_model.add(Lambda(lambda x:tf.reduce_sum(x, 1))) # self.private_move_model.add(MaxPooling3D(pool_size=(2,2,2), strides=1, padding=\u0026#34;VALID\u0026#34;, name=\u0026#39;p1\u0026#39;)) # resnet blocks self.private_move_model.add(self.build_resblock(64, 2, name=\u0026#39;Resnet_1\u0026#39;)) self.private_move_model.add(self.build_resblock(96, 2, name=\u0026#39;Resnet_2\u0026#39;, stride=2)) self.private_move_model.add(self.build_resblock(128, 2, name=\u0026#39;Resnet_3\u0026#39;, stride=2)) self.private_move_model.add(self.build_resblock(256, 2, name=\u0026#39;Resnet_4\u0026#39;, stride=2)) self.private_move_model.add(GlobalAveragePooling2D()) # self.private_move_model.add(Reshape((1, -1))) # self.private_move_model.add(CuDNNLSTM(32)) self.private_move_model.add(Dense(4, name=\u0026#34;d1\u0026#34;)) # action model self.move_model = models.Sequential() # self.move_model.add(self.shared_model) self.move_model.add(self.private_move_model) ","date":"0001-01-01T00:00:00Z","permalink":"https://example.com/p/","title":""}]